//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""MenuInput"",
            ""id"": ""51d35a7e-2378-45fe-89ed-8a9e64fbb729"",
            ""actions"": [
                {
                    ""name"": ""ToggleGameMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b0baa7a9-7940-417a-8ede-10f559bd1c43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleOptionsMenu"",
                    ""type"": ""Button"",
                    ""id"": ""05da4ae1-9517-4d1e-87eb-ef9cd5afac2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestGamepad"",
                    ""type"": ""Button"",
                    ""id"": ""b5039f87-cd86-4cc9-b9af-023b7f8a277c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42c66659-b932-4284-b149-5f0a5bd9a9c5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a62c951-7422-4c7d-826b-57186a04b03f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleOptionsMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2580b70c-61d3-49b7-a0dc-b70a54cb4d22"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MenuInput
        m_MenuInput = asset.FindActionMap("MenuInput", throwIfNotFound: true);
        m_MenuInput_ToggleGameMenu = m_MenuInput.FindAction("ToggleGameMenu", throwIfNotFound: true);
        m_MenuInput_ToggleOptionsMenu = m_MenuInput.FindAction("ToggleOptionsMenu", throwIfNotFound: true);
        m_MenuInput_TestGamepad = m_MenuInput.FindAction("TestGamepad", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuInput
    private readonly InputActionMap m_MenuInput;
    private List<IMenuInputActions> m_MenuInputActionsCallbackInterfaces = new List<IMenuInputActions>();
    private readonly InputAction m_MenuInput_ToggleGameMenu;
    private readonly InputAction m_MenuInput_ToggleOptionsMenu;
    private readonly InputAction m_MenuInput_TestGamepad;
    public struct MenuInputActions
    {
        private @GameInput m_Wrapper;
        public MenuInputActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleGameMenu => m_Wrapper.m_MenuInput_ToggleGameMenu;
        public InputAction @ToggleOptionsMenu => m_Wrapper.m_MenuInput_ToggleOptionsMenu;
        public InputAction @TestGamepad => m_Wrapper.m_MenuInput_TestGamepad;
        public InputActionMap Get() { return m_Wrapper.m_MenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuInputActions set) { return set.Get(); }
        public void AddCallbacks(IMenuInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuInputActionsCallbackInterfaces.Add(instance);
            @ToggleGameMenu.started += instance.OnToggleGameMenu;
            @ToggleGameMenu.performed += instance.OnToggleGameMenu;
            @ToggleGameMenu.canceled += instance.OnToggleGameMenu;
            @ToggleOptionsMenu.started += instance.OnToggleOptionsMenu;
            @ToggleOptionsMenu.performed += instance.OnToggleOptionsMenu;
            @ToggleOptionsMenu.canceled += instance.OnToggleOptionsMenu;
            @TestGamepad.started += instance.OnTestGamepad;
            @TestGamepad.performed += instance.OnTestGamepad;
            @TestGamepad.canceled += instance.OnTestGamepad;
        }

        private void UnregisterCallbacks(IMenuInputActions instance)
        {
            @ToggleGameMenu.started -= instance.OnToggleGameMenu;
            @ToggleGameMenu.performed -= instance.OnToggleGameMenu;
            @ToggleGameMenu.canceled -= instance.OnToggleGameMenu;
            @ToggleOptionsMenu.started -= instance.OnToggleOptionsMenu;
            @ToggleOptionsMenu.performed -= instance.OnToggleOptionsMenu;
            @ToggleOptionsMenu.canceled -= instance.OnToggleOptionsMenu;
            @TestGamepad.started -= instance.OnTestGamepad;
            @TestGamepad.performed -= instance.OnTestGamepad;
            @TestGamepad.canceled -= instance.OnTestGamepad;
        }

        public void RemoveCallbacks(IMenuInputActions instance)
        {
            if (m_Wrapper.m_MenuInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuInputActions @MenuInput => new MenuInputActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IMenuInputActions
    {
        void OnToggleGameMenu(InputAction.CallbackContext context);
        void OnToggleOptionsMenu(InputAction.CallbackContext context);
        void OnTestGamepad(InputAction.CallbackContext context);
    }
}
